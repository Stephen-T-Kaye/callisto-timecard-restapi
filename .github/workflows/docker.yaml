name: Docker Image CI

on:
  push:
    branches: []
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io/stephen-t-kaye

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  build_app:
    name: Build Application
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4
      - name: Retrieve git history
        run: |
          git fetch origin +refs/heads/main:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          server-id: github
          cache: maven

      - name: Build with Maven
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: mvn -s ./timecard_settings.xml clean verify

      - name: Scan with SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST: https://sonarcloud.io
        run: mvn sonar:sonar --file pom.xml -Dsonar.host.url=$SONAR_HOST -Dsonar.token=$SONAR_TOKEN -Dsonar.qualitygate.wait=true

      - uses: actions/upload-artifact@v4
        with:
          name: jar-file
          path: target/*.jar

  build_images:
    name: Build Docker Images
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - image: "callisto-timecard-database"
            artifact: false
            dockerfile: db/Dockerfile
            context: "./db"
          - image: "callisto-timecard-application"
            artifact: 
              name: jar-file
              path: "target/application.jar"
            dockerfile: Dockerfile
            context: "."
    needs:
      - build_app
    steps:
      - uses: actions/checkout@v4

      - name: Lint ${{ matrix.image }} Docker
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ matrix.dockerfile }}

      - name: Download artifact
        uses: actions/download-artifact@v4
        if: ${{ matrix.artifact != false  }}
        with:
          name: ${{ matrix.artifact.name }}
          path: ${{ matrix.artifact.path }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Calculate Docker Tag
        id: docker_tag
        run: |
          BRANCH=$(echo $GITHUB_REF_NAME | tr '[:lower:]' '[:upper:]') && [[ $BRANCH =~ (SK-[0-9]*) ]] && dockerTag=${match/#E/-E}${BASH_REMATCH/#E/-E}
          if [[ -n ${dockerTag} ]]; then
            echo "DOCKER_TAG=${dockerTag}" >> $GITHUB_OUTPUT
          elif [[ "$GITHUB_REF_NAME" == "main" ]]; then
            echo "DOCKER_TAG=latest" >> $GITHUB_OUTPUT
          fi

      - name: Check Docker Tag
        id: docker_tag_check
        run: |
          echo ${{ steps.docker_tag.outputs.DOCKER_TAG }}

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: push
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name == 'push' && steps.docker_tag.outputs.DOCKER_TAG != '' }}
          tags: |
            ${{ env.REGISTRY }}/${{ matrix.image }}:${{ github.sha }}
            ${{ steps.docker_tag.outputs.DOCKER_TAG && format('{0}/{1}:{2}', env.REGISTRY, matrix.image, steps.docker_tag.outputs.DOCKER_TAG) || '' }}

      - name: Generate artifact attestation
        if: ${{ github.event_name == 'push' && steps.docker_tag.outputs.DOCKER_TAG != '' }}
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ matrix.image }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  helm:
    name: Build Helm Charts
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: v3.14.4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.1

      - name: Run chart-testing (lint)
        run: ct lint --target-branch ${{ github.event.repository.default_branch }} --all --chart-dirs ./helm
