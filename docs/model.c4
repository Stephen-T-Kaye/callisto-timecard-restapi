workspace {

    model {
		enterprise "Home Office" {
			user = person "User" "" "User"
			manager = person "Manager" "" "Manager"
			planner = person "Planner" "" "Planner" 
		
			timecardSystem = softwaresystem "TimeCard service" "Allows users to record thier worked time and view their planned time. Managers can view team members worked and planned time." {
				singlePageApplication = container "Single-Page Application" "Provides all of the Time card functionality to customers via their web browser." "React" "Web Browser"
				scheduledEventsProducer = container "Scheduled Events Producer" "Provides a stream of events detailing scheduling data"
				referenceDataService = container "Reference Data service" "Provides access time period and absence reference data"
				personService = container "Person service" "Provides access to a person's meal-break entitelement"
				timecardAPIApplication = container "TimeCard API Application" "Provides timecard functionality via JSON/HTTPS API" "Java and SpringBoot" {
					scheduledEventsConsumer = component "Scheduled Events Consumer" "Listens for ScheduledActivityEvent instances" "Kafka topic consumer"	
					timecardController = component "TimeCard controller" "Provides access to time card functionality via RESTful interface" "Spring REST Controller"					
					timecardComponent = component "TimeCard component" "Provides functionality related to viewing, creating, updating and deleting time card data" "Spring Bean"										
				}	
				database = container "Database" "Stores TimeCard, TimeCardEntry, Notes & FlexChange entities" "Tech TBC" "Database"			
			}
		}
		
		# relationships between people and software systems
        user -> timecardSystem "records worked time, views planned time and makes flex changes using"
		manager -> timecardSystem "views team members worked time, views planned time and makes flex changes using"
		
        # relationships to/from containers
        user -> singlePageApplication "Vrecords worked time, views planned time and makes flex changes using"
		manager -> singlePageApplication "views team members worked time, views planned time and makes flex changes"
        planner -> scheduledEventsProducer "triggers the production of ScheduledActivityEvent instances"
		
        # relationships to/from components
		scheduledEventsConsumer -> scheduledEventsProducer "Consumes events from" "JSON/HTTPS"
		scheduledEventsProducer -> timecardController "Uses"
		timecardController -> personService "Makes API calls to" "JSON/HTTPS"	
		timecardController -> timecardComponent "Uses"
		timecardComponent -> database "Reads from and writes to" "JDBC"
		singlePageApplication -> timecardController "Makes API calls to" "JSON/HTTPS"
		singlePageApplication -> referenceDataService "Makes API calls to" "JSON/HTTPS"
    }

    views {
	
	    container timecardSystem "Containers" {
            include *
            animation {
				timecardAPIApplication
				database
				scheduledEventsProducer
				personService
				singlePageApplication
				referenceDataService
            }
            autoLayout
        }	
		
        component timecardAPIApplication "Components" {
            include *
            animation {
				singlePageApplication
				scheduledEventsProducer
				personService   	
				scheduledEventsConsumer
				timecardController
				timecardComponent
            }
            autoLayout
        }
        
         dynamic timecardAPIApplication "viewNonExistantTimeCard" "Summarises attempt to retrieve no recorded time for a given date" {
            singlePageApplication -> timecardController "Submits request to get timecard(timecardDate, timecardOwnerId, tenantId) command on"
            timecardController -> timecardComponent "Validates date using"
            timecardComponent -> database "SELECT FROM timecards WHERE timecardDate = ? AND timecardOwnerId = ? AND tenantId = ?"
            database -> timecardComponent "Returns empty result set to"
            timecardComponent -> timecardController "Returns back timecard does not exist status to"
            timecardController -> singlePageApplication "Sends timecard does not exist status to"            
            autoLayout
        }

# timecard version?		
        
         dynamic timecardAPIApplication "viewExistingTimeCard" "Summarises how recorded time is retreived for a given date" {
            singlePageApplication -> timecardController "Submits request to get timecard(timecardDate, timecardOwnerId, tenantId) command on"
            timecardController -> timecardComponent "Validates date using"
            timecardComponent -> database "SELECT FROM timecards WHERE timecardDate = ? AND timecardOwnerId = ? AND tenantId = ?"
            database -> timecardComponent "Returns timecard to"
            timecardComponent -> timecardController "Returns timecard to"
            timecardController -> singlePageApplication "Sends back timecard to"            
            autoLayout
        }          
 
        dynamic timecardAPIApplication "recordTimePeriodNewTimeCard" "Summarises how time is recorded for the first time against a given day (timecard)" {
            user -> singlePageApplication "Submits request to enter time for given timecardDate, timecardOwnerId and tenantId"
            singlePageApplication -> referenceDataService "Submits request to get time period enumeration(tenantId) on"
            referenceDataService -> singlePageApplication "returns time period enumeration"
            singlePageApplication -> timecardController "Submits request to get timecard(timecardDate, timecardOwnerId, tenantId) command on"
            timecardController -> singlePageApplication "Sends back timecard does not exist status to" 
			user -> singlePageApplication "selects time period and enters time"
			singlePageApplication -> singlePageApplication "Assembles new timecard for given timecardOwnerId and tenantId. Assembles a time entry and associates with new timecard"
            singlePageApplication -> timecardController "Submits request to create timecard(timecard) command on"       
			timecardController -> timecardComponent "Validates new timecard using"
            timecardComponent -> database "INSERT INTO timecards VALUES..."
            database -> timecardComponent "Returns success status and timecard ID to"
            timecardComponent -> timecardController "Returns success status, and timecard ID to"
            timecardController -> singlePageApplication "Sends back success status, timecard ID and message to"
			singlePageApplication -> user "Sends back success message to"
            autoLayout
        } 

        dynamic timecardAPIApplication "recordTimePeriodExistingTimeCard" "Summarises how additional time is recorded against a given day (timecard)" {
			user -> singlePageApplication "Submits request to enter time for given timecardDate, timecardOwnerId and tenantId"
            singlePageApplication -> referenceDataService "Submits request to get time period enumeration(tenantId) on"
            referenceDataService -> singlePageApplication "returns time period enumeration"
            singlePageApplication -> timecardController "Submits request to get timecard(timecardDate, timecardOwnerId, tenantId) command on"
            timecardController -> singlePageApplication "Sends back timecard to" 
			user -> singlePageApplication "selects time period and enters time"
			singlePageApplication -> singlePageApplication "assembles new time entry and associates with timecard"
            singlePageApplication -> timecardController "Submits request to add timeentry(timecardId, timeentry) command on"     
			timecardController -> timecardComponent "Validates new timecard using"
            timecardComponent -> database "UPDATE timecards SET... WHERE timecardId = ? AND timecardOwnerId = ? AND tenantId = ?"
            database -> timecardComponent "Returns success status to"
            timecardComponent -> timecardController "Returns success status to"
            timecardController -> singlePageApplication "Sends back success status and message to"
			singlePageApplication -> user "Sends back success message to"
            autoLayout
        }		
         
	dynamic timecardAPIApplication "modifyTimePeriodExistingTimeCard" "Summarises how a time entry for a given day is modified (timecard)" {
			user -> singlePageApplication "Submits request to view time for given timecardDate, timecardOwnerId and tenantId"
            singlePageApplication -> referenceDataService "Submits request to get time period enumeration(tenantId) on"
            referenceDataService -> singlePageApplication "returns time period enumeration"
            singlePageApplication -> timecardController "Submits request to get timecard(timecardDate, timecardOwnerId, tenantId) command on"
            timecardController -> singlePageApplication "Sends back timecard to" 
			user -> singlePageApplication "selects time period and modifes time"
			singlePageApplication -> singlePageApplication "assembles modifed time entry and associates with timeentry"
            singlePageApplication -> timecardController "Submits request to modify timeentry(timecardId, timeentry) command on"     
			timecardController -> timecardComponent "Validates new timeentry using"
            timecardComponent -> database "UPDATE timeentry SET... WHERE timeentryid = ? AND tenantId = ?"
            database -> timecardComponent "Returns success status to"
            timecardComponent -> timecardController "Returns success status to"
            timecardController -> singlePageApplication "Sends back success status and message to"
			singlePageApplication -> user "Sends back success message to"
            autoLayout
        }	
        
        styles {
            element "Person" {
                color #ffffff
                fontSize 22
                shape Person
            }
            element "User" {
                background #08427b
            }  
            element "Manager" {
                background #08427b
            } 
            element "Planner" {
                background #08427b
            }             
            element "Software System" {
                background #1168bd
                color #ffffff
            }			
            element "Container" {
                background #438dd5
                color #ffffff
            }
            element "Database" {
                shape Cylinder
            }
            element "Component" {
                background #85bbf0
                color #000000
            }			
        } 
    }
}
